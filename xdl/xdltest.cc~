#include "util/Buffer.hh"
#include "xdl/SymbolTable.hh"
#include "xdl/XDLCompiler.hh"
#include "xdl/std.hh"

class Vec3d {
private:
  double x,y,z;
public:
  Vec3d(double x, double y, double z) : x(x), y(y), z(z) {}
};

/*
TODO:
  create a definition introducer that automatically defines STRUCT with a unique ID
all later references can simply refer to the ID
  Vec3d v;
   b.write(DataType::DEFINESTRUCT);
   b.write(uint32_t(11)); //  32 bit number now refers to structure below
   v.writeMeta(b);
*/

int main() {
  XDLCompiler xdlcompiler("std.xdl");
  SymbolTable& sym = xdlcompiler.getSymbolTable();

  sym.addTypedef("UserId", "u128");
  sym.addTypedef("y", "u128");
  // note: if strict by default should not be able to assign values of type y = Userid
  
  /*
    struct Vec3d {
       double x;
       double y;
       double z;   // double x,y,z;
   }
   */
  Buffer dataBuf("data.bin", 32768);
  Buffer metaBuf("metadata.bin", 32768);
  
  uint32_t a = 123; 
  sym.addTypedef("a", "u32"); // 1 byte metadata
  sym.getSymbol("a")->writeMeta(metaBuf);  // 8 bytes number
  dataBuf.write(a);

  uint64_t b = 1234567;
  sym.addTypedef("b", "u64"); // 1 byte metadata
  sym.getSymbol("b")->writeMeta(metaBuf);  // 8 bytes number
  dataBuf.write(b);
  
  Struct* s = sym.addStruct("Vec3d");
  sym.addMember(s, "double", "x");
  sym.addMember(s, "double", "y");
  sym.addMember(s, "double", "z");
 
#if 0
  Struct* s = sym.addStruct("User");
  s->addMember("UserId", "userid");
  s->addMember("string8", "firstname");
  s->addMember("string8", "lastname");
#endif

  Vec3d v(1,2,3);
  s->writeMeta(metaBuf); // test symbol table writing metadata for Vec3d
  dataBuf.write(1.0);
  dataBuf.write(2.0);
  dataBuf.write(3.0);
  
  #if 0
  List<Vec3d> vectors;
  vectors.add(Vec3d(1,2,3));
  vectors.add(Vec3d(4,5,6));
  vectors.add(Vec3d(1,2,3));
  vectors.writeMeta(buf3); // LIST8 3 v.writeMeta(buf3);
  vectors.write(buf3); // pure data
  #endif
}
